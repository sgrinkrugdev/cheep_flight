name: Daily Flight Watcher

permissions:
  contents: write

on:
  schedule:
    - cron: "5 12 * * *"   # 08:00 in New York during DST (EDT = UTC-4)
  workflow_dispatch: {}     # lets you run it manually
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true   # keep GITHUB_TOKEN for later git push

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - name: Verify code on runner
        run: |
          echo "Commit: $GITHUB_SHA"
          echo "Looking for old fromisoformat callâ€¦"
          grep -n 'fromisoformat(route\["start_date"\])' main.py || echo "Not found"
          echo "---- main.py (first 220 lines, numbered) ----"
          nl -ba main.py | sed -n '1,220p'
      - name: Verify code on runner
        run: |
          echo "Commit SHA: $GITHUB_SHA"
          echo "--- Repo root listing ---"
          ls -la
          echo "--- Search for old fromisoformat call ---"
          grep -n 'fromisoformat(route\["start_date"\])' main.py || echo "Not found"
          echo "--- First 220 lines of main.py (numbered) ---"
          nl -ba main.py | sed -n '1,220p'

      - name: Run watcher
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          AMADEUS_API_KEY: ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: python main.py
      - name: Commit CSV (append history)
        if: always()
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
      
          # 1) Stage & commit FIRST so there are no unstaged changes
          git add cheapest_log.csv
          git commit -m "Update cheapest_log.csv [skip ci]" || echo "No CSV changes"
      
          # 2) Now safely rebase on latest remote and push
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin HEAD:"${GITHUB_REF_NAME}"


